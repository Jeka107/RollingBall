//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/sphereMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SphereMovement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SphereMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""sphereMovement"",
    ""maps"": [
        {
            ""name"": ""Sphere_Map"",
            ""id"": ""a1ac4b52-3850-439f-ac9f-d55d1156a507"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6c62b33a-6f08-4beb-9cdb-216998187932"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenGate"",
                    ""type"": ""Button"",
                    ""id"": ""3718bd7e-4895-4366-bfde-dfce226f59c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""509796c5-593e-426b-87c6-af70b64bebb3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""049fee1b-05df-4adc-96f5-93a506807111"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad44d743-e9d7-43e3-a21c-48ca45dff3d6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""164b2d61-3478-40d9-b380-b8cacfa45eda"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2ad140a-b762-4b33-a1b6-4e51d237c736"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2da17b26-c294-4f48-a6e0-e6d8c40aad36"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eaa3c150-b43d-4589-86b3-4243ffffcb90"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Sphere_Map
        m_Sphere_Map = asset.FindActionMap("Sphere_Map", throwIfNotFound: true);
        m_Sphere_Map_Movement = m_Sphere_Map.FindAction("Movement", throwIfNotFound: true);
        m_Sphere_Map_OpenGate = m_Sphere_Map.FindAction("OpenGate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Sphere_Map
    private readonly InputActionMap m_Sphere_Map;
    private ISphere_MapActions m_Sphere_MapActionsCallbackInterface;
    private readonly InputAction m_Sphere_Map_Movement;
    private readonly InputAction m_Sphere_Map_OpenGate;
    public struct Sphere_MapActions
    {
        private @SphereMovement m_Wrapper;
        public Sphere_MapActions(@SphereMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Sphere_Map_Movement;
        public InputAction @OpenGate => m_Wrapper.m_Sphere_Map_OpenGate;
        public InputActionMap Get() { return m_Wrapper.m_Sphere_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Sphere_MapActions set) { return set.Get(); }
        public void SetCallbacks(ISphere_MapActions instance)
        {
            if (m_Wrapper.m_Sphere_MapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnMovement;
                @OpenGate.started -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnOpenGate;
                @OpenGate.performed -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnOpenGate;
                @OpenGate.canceled -= m_Wrapper.m_Sphere_MapActionsCallbackInterface.OnOpenGate;
            }
            m_Wrapper.m_Sphere_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @OpenGate.started += instance.OnOpenGate;
                @OpenGate.performed += instance.OnOpenGate;
                @OpenGate.canceled += instance.OnOpenGate;
            }
        }
    }
    public Sphere_MapActions @Sphere_Map => new Sphere_MapActions(this);
    public interface ISphere_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnOpenGate(InputAction.CallbackContext context);
    }
}
